# Usando o select.
select(flights, year)
library(nycflights13)
library(dplyr)
View(flights)
# filtando os dados
filter(flights, month == 1, day == 2)
# Usando o select.
select(flights, year)
# Usando o select.
select(flights, year,day)
select(flights, year:day)
select(flights, ~(year:day))
select(flights, -(year:day))
sele <- select(flights, year:day)
sele
select(flights, contains("ra"))
select(flights, contains("a"))
select(flights, contains("1000"))
select(flights, contains("100"))
select(flights, contains(837))
select(flights, contains("837"))
select(flights, contains("b"))
select(flights, contains("ba"))
# Renomeando as variaveis
rename(flights, day = dia)
# Renomeando as variaveis
rename(flights, dia = day)
library(dplyr)
View(flights)
# filtando os dados
filter(flights, month == 1, day == 2)
# Todos os voos de novembro e dezembro
(filter(flights, month == 11 | month == 12))
# Renomeando as variaveis
rename(flights, dia = day)
select(flights, dia = day)
# Movendo as vairaveis para o começo.
select(flights, time_hour, everything())
# Movendo as vairaveis para o começo.
df <- select(flights, time_hour, everything())
View(df)
library(tidyr)
library(nycflights13)
library(dplyr)
# Operacoes com o Pipe.
by_dest <- group_by(flights, dest)
View(by_dest)
delay <- summarise(by_dest,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
)
delay <- filter(delay, count > 20, dest != "HNL")
library(ggplot2)
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
delay2 <- summarise(by_dest,
count = n()
)
View(delay2)
# Outra maneira de usar o pipe.
delays <- flights %>%
group_by(dest) %>%
summarize(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(count > 20, dest != "HNL")
print(count)
# Outra maneira de usar o pipe.
delays <- flights %>%
group_by(dest) %>%
summarize(
conte = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(count > 20, dest != "HNL")
# Outra maneira de usar o pipe.
delays <- flights %>%
group_by(dest) %>%
summarize(
conte = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(conte > 20, dest != "HNL")
print(count)
print(count)
print(count)
print(count)
#importando os dataset
df <- Prestige
library(carData)
#importando os dataset
df <- Prestige
View(df)
View(df)
# 1. Filtrando as colunas para remover Census e Type.
#df$census <- NULL
#df$type <- NULL
df <- df[,c(1,2,3,4)]
# 2. Matriz de correlação.
# Correlaçao de Pearson.
cor(df, df$prestige, method = "pearson")
# 2. Matriz de correlação.
# Correlaçao de Pearson.
cor(df, df$prestige)
# 2. Matriz de correlação.
# Correlaçao de Pearson.
cor(df, df$prestige)
# 2. Matriz de correlação.
# Correlaçao de Pearson.
cor(df, df$prestige)
rl <- lm(prestige ~ education + income + women, data = df)
summary(rl)
plot(rl, which = 5)
# Importando bibliotecas
library(tidyr)
library(readxl)
library(ggplot2)
library(dplyr)
library(nycflights13)
base %>%
print(n = 100)
# Importando os dataset
base <- read.csv('testfiles/train.csv')
teste <- read.csv('testfiles/test.csv')
dicion <- read_excel('dicionario-de-dados/Dicionario_Microdados_Enem_2016.xlsx')
#removendo colunas
base$X <- NULL
base$NU_ANO <- NULL
base$NU_INSCRICAO <- NULL
base$NU_ANO <-  NULL
base %>%
print(n = 100)
setwd("~/git/codenation")
# Importando bibliotecas
library(tidyr)
library(readxl)
library(ggplot2)
library(dplyr)
library(nycflights13)
# Importando os dataset
base <- read.csv('testfiles/train.csv')
teste <- read.csv('testfiles/test.csv')
dicion <- read_excel('dicionario-de-dados/Dicionario_Microdados_Enem_2016.xlsx')
#removendo colunas
base$X <- NULL
base$NU_ANO <- NULL
base$NU_INSCRICAO <- NULL
base$NU_ANO <-  NULL
base %>%
print(n = 100)
base %>%
print(n = 100, width = Inf)
base %>%
print(n = 10, width = Inf)
# Importando os dataset
base <- read.csv('testfiles/train.csv')
spread(base, key = NU_INSCRICAO, value = count)
library(tidyr)
library(readxl)
library(ggplot2)
library(dplyr)
# Importando os dataset
base <- read.csv('testfiles/train.csv')
teste <- read.csv('testfiles/test.csv')
dicion <- read_excel('dicionario-de-dados/Dicionario_Microdados_Enem_2016.xlsx')
spread(base, key = NU_INSCRICAO, value = count)
library(rlang)
spread(base, key = NU_INSCRICAO, value = count)
spread(base, key = CO_MUNICIPO_RESIDENCIA, value = count)
spread(base, key = CO_MUNICIPIO_RESIDENCIA, value = count)
base$X <- NULL
base$NU_ANO <- NULL
base$NU_INSCRICAO <- NULL
base$NU_ANO <-  NULL
count(base[base$IN_MESA_CADEIRA_RODAS])
base[base$IN_MESA_CADEIRA_RODAS]!=0
count(base[base$IN_MESA_CADEIRA_RODAS]!=0)
base[base$IN_MESA_CADEIRA_RODAS]==0
base[base$IN_MESA_CADEIRA_RODAS]!=0
base$IN_MESA_CADEIRA_RODAS!=0
count(base$IN_MESA_CADEIRA_RODAS!=0)
summarise(base$IN_MESA_CADEIRA_RODAS!=0)
